# -*- coding: utf-8 -*-
"""Gradiant_Descent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X_NaS_dcs6HqpsDXxsDK-KAnGo-uC6Pv
"""

import numpy as np
import random

def cost(x_data,y_data,w,b):
    m = len(y_data)
    total_cost = 0
    z = 0

            prediction = w1*x + b
            total_cost += (y - prediction)**2
            z+=1
    return total_cost/(2*m)
def linear_regression(x_data,y_data,w,b,lr=0.01,epochs=10000):
    for _ in range(epochs):
        denta_w, denta_b,j = 0,0,0
        for x,y,w1 in zip(x_data[j],y_data,w):
          predict = w1*x + b
          denta_b += predict - y
          denta_w += (predict - y)*x
          j++
        w -= lr*denta_w/len(x_data)
        b -= lr*denta_b/len(x_data)
    return w,b
x_data = []
y_data = []
n = 10
for i in range(n):
    col = []
    for j in range(6):
        x = int(input())
        col.append(x)
    y = int(input())
    x_data.append(col)
    y_data.append(y)
w = []
for i in range (6):
    w.append(random.gauss(mu=1.0,sigma=0.01))
b = random.gauss(mu=1.0,sigma=0.01)
w,b = linear_regression(x_data,y_data,w,b)
print(w,b)

a = [1,2]
b = [1]
print(list(zip(a,b)))